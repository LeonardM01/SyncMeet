package com.example.syncmeet.error;

import com.example.syncmeet.error.exception.EntityNotFoundException;

import com.example.syncmeet.error.exception.InvalidDateOrderException;
import com.example.syncmeet.error.exception.UserEventMembershipException;
import com.example.syncmeet.error.exception.IdMismatchException;
import org.springframework.dao.DataIntegrityViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Controller advice to create client-friendly JSON structures from server side exceptions
 */
@ControllerAdvice
public class GlobalExceptionHandler {

    /**
     * Handles generic exceptions with single error message
     */
    @ExceptionHandler({
            IdMismatchException.class,
            UserEventMembershipException.class,
            InvalidDateOrderException.class
    })
    public ResponseEntity<Map<String, Object>> handleGenericException(Exception ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("error", ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(EntityNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleEntityNotFoundException(Exception ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("error", ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, Object>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, Object> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<Map<String, Object>> handleDataIntegrityViolationException(DataIntegrityViolationException ex) {
        Map<String, Object> response = new HashMap<>();
        String message = ex.getMostSpecificCause().getMessage();
        Pattern uniquePattern = Pattern.compile("unique_(\\w+)");
        Matcher uniqueMatcher = uniquePattern.matcher(message);

        if (uniqueMatcher.find()) {
            String constraintName = uniqueMatcher.group(1);
            constraintName = constraintName.substring(0, 1).toUpperCase() + constraintName.substring(1);
            String errorMessage = constraintName + " already used";
            response.put("error", errorMessage);
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        response.put("error", ex.getMessage());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles exceptions thrown when a date is invalid
     */
    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<Map<String, Object>> handleMethodArgumentTypeMismatchException(MethodArgumentTypeMismatchException ex) {
        Map<String, Object> response = new HashMap<>();
        response.put("error", "Invalid parameter: " + ex.getName());
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Mainly for handling exceptions generated by invalid tiers in requests
     */
    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<Map<String, Object>> handleHttpMessageNotReadableException(HttpMessageNotReadableException ex) {
        Map<String, Object> response = new HashMap<>();
        Throwable mostSpecificCause = ex.getMostSpecificCause();

        String errorMessage = mostSpecificCause.getMessage();
        // Check if the error message indicates an issue with an Enum type
        if (errorMessage.contains("Enum")) {
            response.put("error", "Invalid tier type");
        } else {
            response.put("error", "Error parsing JSON data: " + errorMessage);
        }

        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
}
