package com.example.syncmeet.error;

import com.example.syncmeet.error.exception.*;

import io.awspring.cloud.s3.S3Exception;
import org.springframework.dao.DataIntegrityViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * Controller advice to create client-friendly JSON structures from server side exceptions
 */
@ControllerAdvice
public class GlobalExceptionHandler {

    /**
     * Handles generic exceptions with single error message
     */
    @ExceptionHandler({
            IdMismatchException.class,
            UserEventMembershipException.class,
            InvalidDateOrderException.class,
            RequestException.class,
            IllegalArgumentException.class,
            S3Exception.class
    })
    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {
        List<String> errors = Collections.singletonList(ex.getMessage());
        ErrorResponse response = new ErrorResponse(errors);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(EntityNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleEntityNotFoundException(Exception ex) {
        List<String> errors = Collections.singletonList(ex.getMessage());
        ErrorResponse response = new ErrorResponse(errors);
        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {
        List<String> errors = ex.getBindingResult().getAllErrors().stream()
                .map(error -> ((FieldError) error).getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.toList());
        ErrorResponse response = new ErrorResponse(errors);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ErrorResponse> handleDataIntegrityViolationException(DataIntegrityViolationException ex) {
        String message = ex.getMostSpecificCause().getMessage();
        Pattern uniquePattern = Pattern.compile("unique_(\\w+)");
        Matcher uniqueMatcher = uniquePattern.matcher(message);

        String errorMessage;
        if (uniqueMatcher.find()) {
            String constraintName = uniqueMatcher.group(1);
            constraintName = constraintName.substring(0, 1).toUpperCase() + constraintName.substring(1);
            errorMessage = constraintName + " already used";
        } else {
            errorMessage = ex.getMessage();
        }

        List<String> errors = Collections.singletonList(errorMessage);
        ErrorResponse response = new ErrorResponse(errors);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles exceptions thrown when a date is invalid
     */
    @ExceptionHandler(MethodArgumentTypeMismatchException.class)
    public ResponseEntity<ErrorResponse> handleMethodArgumentTypeMismatchException(MethodArgumentTypeMismatchException ex) {
        List<String> errors = Collections.singletonList("Invalid parameter: " + ex.getName());
        ErrorResponse response = new ErrorResponse(errors);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }

    /**
     * Mainly for handling exceptions generated by invalid tiers in requests
     */
    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ErrorResponse> handleHttpMessageNotReadableException(HttpMessageNotReadableException ex) {
        Throwable mostSpecificCause = ex.getMostSpecificCause();

        String errorMessage = mostSpecificCause.getMessage();
        // Check if the error message indicates an issue with an Enum type
        if (errorMessage.contains("Enum")) {
            errorMessage = "Invalid tier type";
        } else {
            errorMessage = "Error parsing JSON data: " + errorMessage;
        }

        List<String> errors = Collections.singletonList(errorMessage);
        ErrorResponse response = new ErrorResponse(errors);
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }
}